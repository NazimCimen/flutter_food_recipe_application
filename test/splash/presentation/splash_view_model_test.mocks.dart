// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_food_recipe_application/test/splash/presentation/splash_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_food_recipe_application/feauture/splash/splash_export.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSplashRepository_0 extends _i1.SmartFake
    implements _i2.SplashRepository {
  _FakeSplashRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CheckCacheOnboardShownUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckCacheOnboardShownUseCase extends _i1.Mock
    implements _i2.CheckCacheOnboardShownUseCase {
  MockCheckCacheOnboardShownUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SplashRepository get splashRepository => (super.noSuchMethod(
        Invocation.getter(#splashRepository),
        returnValue: _FakeSplashRepository_0(
          this,
          Invocation.getter(#splashRepository),
        ),
      ) as _i2.SplashRepository);

  @override
  _i3.Future<_i2.Either<_i2.Failure, bool?>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i3.Future<_i2.Either<_i2.Failure, bool?>>.value(
            _FakeEither_1<_i2.Failure, bool?>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Either<_i2.Failure, bool?>>);
}

/// A class which mocks [GetAppDatabaseVersionNumberUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAppDatabaseVersionNumberUseCase extends _i1.Mock
    implements _i2.GetAppDatabaseVersionNumberUseCase {
  MockGetAppDatabaseVersionNumberUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SplashRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeSplashRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.SplashRepository);

  @override
  _i3.Future<_i2.Either<_i2.Failure, _i2.AppVersionEntity>> call(
          {required String? platform}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#platform: platform},
        ),
        returnValue:
            _i3.Future<_i2.Either<_i2.Failure, _i2.AppVersionEntity>>.value(
                _FakeEither_1<_i2.Failure, _i2.AppVersionEntity>(
          this,
          Invocation.method(
            #call,
            [],
            {#platform: platform},
          ),
        )),
      ) as _i3.Future<_i2.Either<_i2.Failure, _i2.AppVersionEntity>>);
}

/// A class which mocks [AppVersionManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppVersionManager extends _i1.Mock implements _i2.AppVersionManager {
  MockAppVersionManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool checkVersions({
    required String? deviceAppVersionNumber,
    required String? databaseAppVersionNumber,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkVersions,
          [],
          {
            #deviceAppVersionNumber: deviceAppVersionNumber,
            #databaseAppVersionNumber: databaseAppVersionNumber,
          },
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<String> getAppDeviceVersionInfo() => (super.noSuchMethod(
        Invocation.method(
          #getAppDeviceVersionInfo,
          [],
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #getAppDeviceVersionInfo,
            [],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  String getDevicePlatform() => (super.noSuchMethod(
        Invocation.method(
          #getDevicePlatform,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #getDevicePlatform,
            [],
          ),
        ),
      ) as String);
}
